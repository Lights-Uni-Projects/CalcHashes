import typing

from _typeshed import Incomplete

from .ansi import BEL as BEL
from .ansi import AnsiBack as AnsiBack
from .ansi import AnsiFore as AnsiFore
from .ansi import AnsiStyle as AnsiStyle
from .ansi import Style as Style
from .win32 import winapi_test as winapi_test
from .win32 import windll as windll
from .winterm import WinColor as WinColor
from .winterm import WinStyle as WinStyle
from .winterm import WinTerm as WinTerm
from .winterm import enable_vt_processing as enable_vt_processing

winterm: Incomplete


class StreamWrapper:
    def __init__(self, wrapped: typing.Any, converter: typing.Any) -> None: ...
    def __getattr__(self, name: typing.Any) -> typing.Any: ...
    def __enter__(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def __exit__(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def write(self, text: typing.Any) -> None: ...
    def isatty(self) -> typing.Any: ...
    @property
    def closed(self) -> typing.Any: ...


class AnsiToWin32:
    ANSI_CSI_RE: Incomplete
    ANSI_OSC_RE: Incomplete
    wrapped: Incomplete
    autoreset: Incomplete
    stream: Incomplete
    strip: Incomplete
    convert: Incomplete
    win32_calls: Incomplete
    on_stderr: Incomplete
    def __init__(self, wrapped: typing.Any, convert: Incomplete | None = ...,
                 strip: Incomplete | None = ..., autoreset: bool = ...) -> None: ...

    def should_wrap(self) -> typing.Any: ...
    def get_win32_calls(self) -> typing.Any: ...
    def write(self, text: typing.Any) -> None: ...
    def reset_all(self) -> None: ...
    def write_and_convert(self, text: typing.Any) -> None: ...
    def write_plain_text(self, text: typing.Any, start: typing.Any, end: typing.Any) -> None: ...
    def convert_ansi(self, paramstring: typing.Any, command: typing.Any) -> None: ...
    def extract_params(self, command: typing.Any, paramstring: typing.Any) -> typing.Any: ...
    def call_win32(self, command: typing.Any, params: typing.Any) -> None: ...
    def convert_osc(self, text: typing.Any) -> typing.Any: ...
    def flush(self) -> None: ...
